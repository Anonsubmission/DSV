#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Web.Helpers
{
    using System;
    using System.Collections.Generic;
    
    #line 3 "Maps.cshtml"
    using System.Diagnostics;
    
    #line default
    #line hidden
    
    #line 6 "Maps.cshtml"
    using System.Globalization;
    
    #line default
    #line hidden
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    
    #line 5 "Maps.cshtml"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    using System.Web.WebPages;
    using System.Web.WebPages.Html;
    
    #line 4 "Maps.cshtml"
    using System.Web.WebPages.Scope;
    
    #line default
    #line hidden
    
    #line 7 "Maps.cshtml"
    using Microsoft.Internal.Web.Utils;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "1.5.4.0")]
    public class Maps : System.Web.WebPages.HelperPage
    {
        
        #line 9 "Maps.cshtml"

    private const string DefaultWidth = "300px";
    private const string DefaultHeight = "300px";
    private static readonly object _mapIdKey = new object();
    private static readonly object _mapQuestApiKey = new object();
    private static readonly object _bingApiKey = new object();
    private static readonly object _yahooApiKey = new object();

    public static string MapQuestApiKey {
        get {
            return (string)ScopeStorage.CurrentScope[_mapQuestApiKey];
        }
        set {
            ScopeStorage.CurrentScope[_mapQuestApiKey] = value;
        }
    }

    public static string YahooApiKey {
        get {
            return (string)ScopeStorage.CurrentScope[_yahooApiKey];
        }
        set {
            ScopeStorage.CurrentScope[_yahooApiKey] = value;
        }
    }

    public static string BingApiKey {
        get {
            return (string)ScopeStorage.CurrentScope[_bingApiKey];
        }
        set {
            ScopeStorage.CurrentScope[_bingApiKey] = value;
        }
    }

    // allow for stubbing this static resource in tests
    private static Func<HttpContextBase> _getCurrentHttpContext = (Func<HttpContextBase>)(() => new HttpContextWrapper(HttpContext.Current));
    internal static Func<HttpContextBase> GetCurrentHttpContext {
        private get {
            return _getCurrentHttpContext;
        }
        set {
            _getCurrentHttpContext = value;
        }
    }

    private static int MapId {
        get {
            var value = (int?)(GetCurrentHttpContext().Items[_mapIdKey]);
            return value.GetValueOrDefault();
        }
        set {
            GetCurrentHttpContext().Items[_mapIdKey] = value;
        }
    }
    
    private static string GetMapElementId() {
        return "map_" + MapId;   
    }
    
    private static string TryParseUnit(string value, string defaultValue) {
        if (String.IsNullOrEmpty(value)) {
            return defaultValue;
        }
        try {
            return Unit.Parse(value, CultureInfo.InvariantCulture).ToString(CultureInfo.InvariantCulture);
        } catch (ArgumentException) {
            return defaultValue;    
        }    
    }

    private static IHtmlString RawJS(string text) {
        return Raw(HttpUtility.JavaScriptStringEncode(text));
    }
    
    private static IHtmlString Raw(string text) {
        return new HtmlString(text);    
    }
    
    private static string GetApiKey(string apiKey, object scopeStorageKey) {
        if (apiKey.IsEmpty()) {
            return (string)ScopeStorage.CurrentScope[scopeStorageKey];   
        }
        return apiKey;   
    }

    public class MapLocation {
        private readonly string _latitude;
        private readonly string _longitude;
        public MapLocation(string latitude, string longitude) {
            _latitude = latitude;
            _longitude = longitude;
        }

        public string Latitude {
            get { return _latitude; }
        }

        public string Longitude {
            get { return _longitude; }
        }
    }

    internal static string GetDirectionsQuery(string location, string latitude, string longitude, Func<string, string> encoder = null) {
        encoder = encoder ?? HttpUtility.UrlEncode;
        Debug.Assert(!(location.IsEmpty() && latitude.IsEmpty() && longitude.IsEmpty()));
        if (location.IsEmpty()) {
            return encoder(latitude + "," + longitude);
        }
        return encoder(location);
    }

        #line default
        #line hidden

public static System.Web.WebPages.HelperResult GetMapQuestHtml(string key = null, string location = null, string latitude = null, string longitude = null, string width = "300px", string height = "300px", int zoom = 7, string type = "map",
            bool showDirectionsLink = true, string directionsLinkText = "Get Directions", bool showZoomControl = true, IEnumerable<MapLocation> pushpins = null) {
return new System.Web.WebPages.HelperResult(__razor_helper_writer => {



#line 147 "Maps.cshtml"
                                                                                                                                                                  
    key = GetApiKey(key, _mapQuestApiKey);
    if (key.IsEmpty()) {
        throw new ArgumentException(CommonResources.Argument_Cannot_Be_Null_Or_Empty, "key");  
    }
    
    string mapElement = GetMapElementId();
    string loc = "null"; // We want to print the value 'null' in the client
    if (latitude != null && longitude != null) {
        loc = String.Format(CultureInfo.InvariantCulture, "{{lat: {0}, lng: {1}}}",
            HttpUtility.JavaScriptStringEncode(latitude, addDoubleQuotes: false), HttpUtility.JavaScriptStringEncode(longitude, addDoubleQuotes: false));
    }

    // The MapQuest key listed on their website is Url encoded to begin with. 

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "    <script src=\"http://mapquestapi.com/sdk/js/v6.0.0/mqa.toolkit.js?key=");



#line 161 "Maps.cshtml"
                                          WriteTo(@__razor_helper_writer, key);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\" type=\"text/javascript\"></script>\r\n");



WriteLiteralTo(@__razor_helper_writer, "    <script type=\"text/javascript\">\r\n        MQA.EventUtil.observe(window, \'load\'" +
", function() {\r\n            var map = new MQA.TileMap(document.getElementById(\'");



#line 164 "Maps.cshtml"
                                WriteTo(@__razor_helper_writer, mapElement);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\'), ");



#line 164 "Maps.cshtml"
                                               WriteTo(@__razor_helper_writer, zoom);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ", ");



#line 164 "Maps.cshtml"
                                                      WriteTo(@__razor_helper_writer, Raw(loc));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ", \'");



#line 164 "Maps.cshtml"
                                                                  WriteTo(@__razor_helper_writer, RawJS(type));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\'); \r\n");



#line 165 "Maps.cshtml"
             if (showZoomControl) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "            ");

WriteLiteralTo(@__razor_helper_writer, "\r\n                MQA.withModule(\'zoomcontrol3\', function() {\r\n\t                m" +
"ap.addControl(new MQA.LargeZoomControl3(), new MQA.MapCornerPlacement(MQA.MapCor" +
"ner.TOP_LEFT));\r\n                });\r\n            ");

WriteLiteralTo(@__razor_helper_writer, "\r\n");



#line 171 "Maps.cshtml"
            }

#line default
#line hidden



#line 172 "Maps.cshtml"
             if (!String.IsNullOrEmpty(location)) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "            ");

WriteLiteralTo(@__razor_helper_writer, "\r\n                MQA.withModule(\'geocoder\', function() {\r\n                    ma" +
"p.geocodeAndAddLocations(\'");



#line 175 "Maps.cshtml"
                 WriteTo(@__razor_helper_writer, RawJS(location));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\');\r\n                });\r\n            ");

WriteLiteralTo(@__razor_helper_writer, "\r\n");



#line 178 "Maps.cshtml"
            }

#line default
#line hidden



#line 179 "Maps.cshtml"
             if (pushpins != null) {
                foreach (var p in pushpins) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                    ");

WriteLiteralTo(@__razor_helper_writer, " map.addShape(new MQA.Poi({lat:");



#line 181 "Maps.cshtml"
                      WriteTo(@__razor_helper_writer, RawJS(p.Latitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ",lng:");



#line 181 "Maps.cshtml"
                                             WriteTo(@__razor_helper_writer, RawJS(p.Longitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "}));\r\n");



#line 182 "Maps.cshtml"
	            }
            }

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "        });\r\n    </script>\r\n");



#line 186 "Maps.cshtml"
    

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "    <div id=\"");



#line 187 "Maps.cshtml"
WriteTo(@__razor_helper_writer, mapElement);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\" style=\"width:");



#line 187 "Maps.cshtml"
        WriteTo(@__razor_helper_writer, TryParseUnit(width, DefaultWidth));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "; height:");



#line 187 "Maps.cshtml"
                                                   WriteTo(@__razor_helper_writer, TryParseUnit(height, DefaultHeight));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ";\">\r\n    </div>\r\n");



#line 189 "Maps.cshtml"
    if (showDirectionsLink) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "        <a class=\"map-link\" href=\"http://www.mapquest.com/?q=");



#line 190 "Maps.cshtml"
                              WriteTo(@__razor_helper_writer, GetDirectionsQuery(location, latitude, longitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\">");



#line 190 "Maps.cshtml"
                                                                                  WriteTo(@__razor_helper_writer, directionsLinkText);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "</a>\r\n");



#line 191 "Maps.cshtml"
    }
    MapId++;

#line default
#line hidden

});

}


public static System.Web.WebPages.HelperResult GetBingHtml(string key = null, string location = null, string latitude = null, string longitude = null, string width = null, string height = null, int zoom = 14, string type = "auto",
            bool useAdaptiveOverlay = true, bool showDirectionsLink = true, string directionsLinkText = "Get Directions", IEnumerable<MapLocation> pushpins = null) {
return new System.Web.WebPages.HelperResult(__razor_helper_writer => {



#line 222 "Maps.cshtml"
                                                                                                                                                                     
    key = GetApiKey(key, _bingApiKey);
    if (key.IsEmpty()) {
        throw new ArgumentException(CommonResources.Argument_Cannot_Be_Null_Or_Empty, "key");
    } 
    string mapElement = GetMapElementId();
    
    type = (type ?? "auto").ToLowerInvariant();


#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "    <script src=\"http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0" +
"\" type=\"text/javascript\"></script>\r\n");



WriteLiteralTo(@__razor_helper_writer, "    <script type=\"text/javascript\">\r\n        jQuery(window).load(function() { \r\n " +
"           var map = null;\r\n");



#line 235 "Maps.cshtml"
             if (useAdaptiveOverlay) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                ");

WriteLiteralTo(@__razor_helper_writer, "\r\n                Microsoft.Maps.loadModule(\'Microsoft.Maps.Overlays.Style\', {\r\n " +
"                   callback: function () {\r\n                        map = new Mi" +
"crosoft.Maps.Map(document.getElementById(\"");



#line 239 "Maps.cshtml"
                                               WriteTo(@__razor_helper_writer, mapElement);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\"), { credentials: \'");



#line 239 "Maps.cshtml"
                                                                              WriteTo(@__razor_helper_writer, RawJS(key));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\', mapTypeId: Microsoft.Maps.MapTypeId[\'");



#line 239 "Maps.cshtml"
                                                                                                                                 WriteTo(@__razor_helper_writer, RawJS(type));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\'], customizeOverlays: true });\r\n\r\n                ");

WriteLiteralTo(@__razor_helper_writer, "\r\n");



#line 242 "Maps.cshtml"
            } else {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                ");

WriteLiteralTo(@__razor_helper_writer, "\r\n                map = new Microsoft.Maps.Map(document.getElementById(\"");



#line 244 "Maps.cshtml"
                                       WriteTo(@__razor_helper_writer, mapElement);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\"), { credentials: \'");



#line 244 "Maps.cshtml"
                                                                      WriteTo(@__razor_helper_writer, RawJS(key));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\', mapTypeId: Microsoft.Maps.MapTypeId[\'");



#line 244 "Maps.cshtml"
                                                                                                                         WriteTo(@__razor_helper_writer, RawJS(type));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\'] });\r\n                ");

WriteLiteralTo(@__razor_helper_writer, "\r\n");



#line 246 "Maps.cshtml"
            }

#line default
#line hidden



#line 247 "Maps.cshtml"
             if (latitude != null && longitude != null) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                ");

WriteLiteralTo(@__razor_helper_writer, " map.setView({zoom: ");



#line 248 "Maps.cshtml"
       WriteTo(@__razor_helper_writer, zoom);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ", center: new Microsoft.Maps.Location(");



#line 248 "Maps.cshtml"
                                                  WriteTo(@__razor_helper_writer, RawJS(latitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ", ");



#line 248 "Maps.cshtml"
                                                                    WriteTo(@__razor_helper_writer, RawJS(longitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ")});\r\n");



#line 249 "Maps.cshtml"
            }
            else if (location != null) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                ");

WriteLiteralTo(@__razor_helper_writer, "\r\n                map.getCredentials(function(credentials) {\r\n                   " +
" $.ajax({\r\n                        url: \'http://dev.virtualearth.net/REST/v1/Loc" +
"ations/\' + encodeURI(\'");



#line 254 "Maps.cshtml"
                                                            WriteTo(@__razor_helper_writer, RawJS(location));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, @"'),
                        type: 'GET',
                        crossDomain: true,
                        data: { output: 'json', key: credentials }, dataType: 'jsonp', jsonp: 'jsonp',
                        success: function(data) {
                            if (data && data.resourceSets && data.resourceSets.length > 0 && data.resourceSets[0].resources && data.resourceSets[0].resources.length > 0) {
                                var r = data.resourceSets[0].resources[0].point.coordinates;
                                var loc = new Microsoft.Maps.Location(r[0], r[1]);
                                map.setView({zoom: ");



#line 262 "Maps.cshtml"
                    WriteTo(@__razor_helper_writer, zoom);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ", center: loc});              \r\n                                map.entities.push" +
"(new Microsoft.Maps.Pushpin(loc, null));\r\n                            }\r\n       " +
"                 }\r\n                    });\r\n                });\r\n              " +
"  ");

WriteLiteralTo(@__razor_helper_writer, "\r\n");



#line 269 "Maps.cshtml"
            }

#line default
#line hidden



#line 270 "Maps.cshtml"
             if (pushpins != null) {
                foreach(var loc in pushpins) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                    ");

WriteLiteralTo(@__razor_helper_writer, " map.entities.push(new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(");



#line 272 "Maps.cshtml"
                                                                 WriteTo(@__razor_helper_writer, RawJS(loc.Latitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ", ");



#line 272 "Maps.cshtml"
                                                                                       WriteTo(@__razor_helper_writer, RawJS(loc.Longitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "), null));\r\n");



#line 273 "Maps.cshtml"
                }
            }

#line default
#line hidden



#line 275 "Maps.cshtml"
             if (useAdaptiveOverlay) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                ");

WriteLiteralTo(@__razor_helper_writer, "\r\n                    }\r\n                });\r\n                ");

WriteLiteralTo(@__razor_helper_writer, "\r\n");



#line 280 "Maps.cshtml"
            }

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "        });\r\n    </script>\r\n");



#line 283 "Maps.cshtml"
    

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "    <div class=\"map\" id=\"");



#line 284 "Maps.cshtml"
WriteTo(@__razor_helper_writer, mapElement);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\" style=\"position:relative; width:");



#line 284 "Maps.cshtml"
                                       WriteTo(@__razor_helper_writer, TryParseUnit(width, DefaultWidth));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "; height:");



#line 284 "Maps.cshtml"
                                                                                  WriteTo(@__razor_helper_writer, TryParseUnit(height, DefaultHeight));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ";\">\r\n    </div>\r\n");



#line 286 "Maps.cshtml"
    if (showDirectionsLink) {
        // Review: Need to figure out if the link needs to be localized. 

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "        <a class=\"map-link\" href=\"http://www.bing.com/maps/?v=2&where1=");



#line 288 "Maps.cshtml"
                                        WriteTo(@__razor_helper_writer, GetDirectionsQuery(location, latitude, longitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\">");



#line 288 "Maps.cshtml"
                                                                                            WriteTo(@__razor_helper_writer, directionsLinkText);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "</a>\r\n");



#line 289 "Maps.cshtml"
    }
    MapId++;

#line default
#line hidden

});

}


public static System.Web.WebPages.HelperResult GetGoogleHtml(string location = null, string latitude = null, string longitude = null, string width = null, string height = null, int zoom = 14, string type = "ROADMAP",
                bool showDirectionsLink = true, string directionsLinkText = "Get Directions", IEnumerable<MapLocation> pushpins = null) {
return new System.Web.WebPages.HelperResult(__razor_helper_writer => {



#line 316 "Maps.cshtml"
                                                                                                                                         
    string mapElement = GetMapElementId();
    type = (type ?? "ROADMAP").ToUpperInvariant(); // Map types are in upper case

    // Google maps does not support null centers. We'll set it to arbitrary values if they are null and only the location is provided.
    // These locations are somewhere around Microsoft's Redmond Campus.
    latitude = latitude ?? "47.652437";
    longitude = longitude ?? "-122.132424";


#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "    <script src=\"http://maps.google.com/maps/api/js?sensor=false\" type=\"text/java" +
"script\"></script>\r\n");



WriteLiteralTo(@__razor_helper_writer, "    <script type=\"text/javascript\">\r\n        $(function() {\r\n            var map " +
"= new google.maps.Map(document.getElementById(\"");



#line 328 "Maps.cshtml"
                                    WriteTo(@__razor_helper_writer, mapElement);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\"), { zoom: ");



#line 328 "Maps.cshtml"
                                                           WriteTo(@__razor_helper_writer, zoom);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ", center: new google.maps.LatLng(");



#line 328 "Maps.cshtml"
                                                                                                 WriteTo(@__razor_helper_writer, RawJS(latitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ", ");



#line 328 "Maps.cshtml"
                                                                                                                   WriteTo(@__razor_helper_writer, RawJS(longitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "), mapTypeId: google.maps.MapTypeId[\'");



#line 328 "Maps.cshtml"
                                                                                                                                                                         WriteTo(@__razor_helper_writer, RawJS(type));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\'] });\r\n");



#line 329 "Maps.cshtml"
             if (!String.IsNullOrEmpty(location)) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                ");

WriteLiteralTo(@__razor_helper_writer, "\r\n                new google.maps.Geocoder().geocode({address: \'");



#line 331 "Maps.cshtml"
                               WriteTo(@__razor_helper_writer, RawJS(location));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, @"'}, function(response, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        var best = response[0].geometry.location;
                        map.panTo(best);
                        new google.maps.Marker({map : map, position: best });
                    }
                });
                ");

WriteLiteralTo(@__razor_helper_writer, "\r\n");



#line 339 "Maps.cshtml"
            }

#line default
#line hidden



#line 340 "Maps.cshtml"
             if (pushpins != null) {
                foreach(var loc in pushpins) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                    ");

WriteLiteralTo(@__razor_helper_writer, " new google.maps.Marker({map : map, position: new google.maps.LatLng(");



#line 342 "Maps.cshtml"
                                                            WriteTo(@__razor_helper_writer, RawJS(loc.Latitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ", ");



#line 342 "Maps.cshtml"
                                                                                  WriteTo(@__razor_helper_writer, RawJS(loc.Longitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ")});\r\n");



#line 343 "Maps.cshtml"
                }
            }

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "        });\r\n    </script>\r\n");



#line 347 "Maps.cshtml"
    

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "    <div class=\"map\" id=\"");



#line 348 "Maps.cshtml"
WriteTo(@__razor_helper_writer, mapElement);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\" style=\"width:");



#line 348 "Maps.cshtml"
                    WriteTo(@__razor_helper_writer, TryParseUnit(width, DefaultWidth));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "; height:");



#line 348 "Maps.cshtml"
                                                               WriteTo(@__razor_helper_writer, TryParseUnit(height, DefaultHeight));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ";\">\r\n    </div>\r\n");



#line 350 "Maps.cshtml"
    if (showDirectionsLink) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "        <a class=\"map-link\" href=\"http://maps.google.com/maps?q=");



#line 351 "Maps.cshtml"
                                 WriteTo(@__razor_helper_writer, GetDirectionsQuery(location, latitude, longitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\">");



#line 351 "Maps.cshtml"
                                                                                     WriteTo(@__razor_helper_writer, directionsLinkText);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "</a>\r\n");



#line 352 "Maps.cshtml"
    }
    MapId++;

#line default
#line hidden

});

}


public static System.Web.WebPages.HelperResult GetYahooHtml(string key = null, string location = null, string latitude = null, string longitude = null, string width = null, string height = null, int zoom = 4, string type = "YAHOO_MAP_REG",
                bool showDirectionsLink = true, string directionsLinkText = "Get Directions", IEnumerable<MapLocation> pushpins = null) {
return new System.Web.WebPages.HelperResult(__razor_helper_writer => {



#line 381 "Maps.cshtml"
                                                                                                                                         
    key = GetApiKey(key, _yahooApiKey);
    if (key.IsEmpty()) {
        throw new ArgumentException(CommonResources.Argument_Cannot_Be_Null_Or_Empty, "key");
    }                     
    string mapElement = GetMapElementId();


#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "    <script src=\"http://api.maps.yahoo.com/ajaxymap?v=3.8&appid=");



#line 388 "Maps.cshtml"
                                 WriteTo(@__razor_helper_writer, HttpUtility.UrlEncode(key));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\" type=\"text/javascript\"></script>\r\n");



WriteLiteralTo(@__razor_helper_writer, "    <script type=\"text/javascript\">\r\n        $(function() {\r\n            var map " +
"= new YMap(document.getElementById(\'");



#line 391 "Maps.cshtml"
                         WriteTo(@__razor_helper_writer, RawJS(mapElement));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\'));  \r\n            map.addTypeControl();  \r\n            map.setMapType(");



#line 393 "Maps.cshtml"
WriteTo(@__razor_helper_writer, RawJS(type));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ");  \r\n");



#line 394 "Maps.cshtml"
             if (latitude != null && longitude != null) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                ");

WriteLiteralTo(@__razor_helper_writer, " map.drawZoomAndCenter(new YGeoPoint(");



#line 395 "Maps.cshtml"
                        WriteTo(@__razor_helper_writer, RawJS(latitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ", ");



#line 395 "Maps.cshtml"
                                          WriteTo(@__razor_helper_writer, RawJS(longitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "), ");



#line 395 "Maps.cshtml"
                                                              WriteTo(@__razor_helper_writer, zoom);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ");\r\n");



#line 396 "Maps.cshtml"
            }
            else if (!String.IsNullOrEmpty(location)) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                ");

WriteLiteralTo(@__razor_helper_writer, " map.drawZoomAndCenter(\'");



#line 398 "Maps.cshtml"
           WriteTo(@__razor_helper_writer, RawJS(location));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\', ");



#line 398 "Maps.cshtml"
                              WriteTo(@__razor_helper_writer, zoom);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ");\r\n");



#line 399 "Maps.cshtml"
            }
            else {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                ");

WriteLiteralTo(@__razor_helper_writer, " map.setZoomLevel(");



#line 401 "Maps.cshtml"
     WriteTo(@__razor_helper_writer, zoom);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ");\r\n");



#line 402 "Maps.cshtml"
            }

#line default
#line hidden



#line 403 "Maps.cshtml"
             if(pushpins != null) {
                foreach (var loc in pushpins) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "                     ");

WriteLiteralTo(@__razor_helper_writer, " map.addMarker(new YGeoPoint(");



#line 405 "Maps.cshtml"
                     WriteTo(@__razor_helper_writer, RawJS(loc.Latitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ", ");



#line 405 "Maps.cshtml"
                                           WriteTo(@__razor_helper_writer, RawJS(loc.Longitude));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "));\r\n");



#line 406 "Maps.cshtml"
                 }
            }

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\r\n        });\r\n    </script>\r\n");



#line 411 "Maps.cshtml"
    

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "    <div id=\"");



#line 412 "Maps.cshtml"
WriteTo(@__razor_helper_writer, mapElement);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\" style=\"width:");



#line 412 "Maps.cshtml"
        WriteTo(@__razor_helper_writer, TryParseUnit(width, DefaultWidth));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "; height:");



#line 412 "Maps.cshtml"
                                                   WriteTo(@__razor_helper_writer, TryParseUnit(height, DefaultHeight));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, ";\">\r\n    </div>\r\n");



#line 414 "Maps.cshtml"
    if (showDirectionsLink) {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "        <a class=\"map-link\" href=\"http://maps.yahoo.com/#q1=");



#line 415 "Maps.cshtml"
                             WriteTo(@__razor_helper_writer, GetDirectionsQuery(location, latitude, longitude, HttpUtility.UrlPathEncode));

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\">");



#line 415 "Maps.cshtml"
                                                                                                            WriteTo(@__razor_helper_writer, directionsLinkText);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "</a>\r\n");



#line 416 "Maps.cshtml"
    }
    MapId++;

#line default
#line hidden

});

}


        public Maps()
        {
        }
    }
}
#pragma warning restore 1591
