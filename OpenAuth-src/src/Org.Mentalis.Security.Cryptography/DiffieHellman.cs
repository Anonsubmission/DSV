// <auto-generated />

//
// DiffieHellman.cs: Defines a base class from which all Diffie-Hellman implementations inherit
//
// Author:
//	Pieter Philippaerts (Pieter@mentalis.org)
//
// (C) 2003 The Mentalis.org Team (http://www.mentalis.org/)
//
//
// Source Code License
// Copyright © 2002-2007, The Mentalis.org Team
// All rights reserved.
// http://www.mentalis.org/
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
// - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
// - Neither the name of the Mentalis.org Team, nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

using System;
using System.Security.Cryptography;

namespace Org.Mentalis.Security.Cryptography {
	/// <summary>
	/// Defines a base class from which all Diffie-Hellman implementations inherit.
	/// </summary>
	internal abstract class DiffieHellman : AsymmetricAlgorithm {
		/// <summary>
		/// Creates an instance of the default implementation of the <see cref="DiffieHellman"/> algorithm.
		/// </summary>
		/// <returns>A new instance of the default implementation of DiffieHellman.</returns>
		public static new DiffieHellman Create () {
			return Create ("Mono.Security.Cryptography.DiffieHellman");
		}
		/// <summary>
		/// Creates an instance of the specified implementation of <see cref="DiffieHellman"/>.
		/// </summary>
		/// <param name="algName">The name of the implementation of DiffieHellman to use.</param>
		/// <returns>A new instance of the specified implementation of DiffieHellman.</returns>
		public static new DiffieHellman Create (string algName) {
			return (DiffieHellman) CryptoConfig.CreateFromName (algName);
		}

		/// <summary>
		/// Initializes a new <see cref="DiffieHellman"/> instance.
		/// </summary>
		public DiffieHellman() {}

		/// <summary>
		/// When overridden in a derived class, creates the key exchange data. 
		/// </summary>
		/// <returns>The key exchange data to be sent to the intended recipient.</returns>
		public abstract byte[] CreateKeyExchange();
		/// <summary>
		/// When overridden in a derived class, extracts secret information from the key exchange data.
		/// </summary>
		/// <param name="keyEx">The key exchange data within which the secret information is hidden.</param>
		/// <returns>The secret information derived from the key exchange data.</returns>
		public abstract byte[] DecryptKeyExchange(byte[] keyEx);

		/// <summary>
		/// When overridden in a derived class, exports the <see cref="DHParameters"/>.
		/// </summary>
		/// <param name="includePrivate"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
		/// <returns>The parameters for Diffie-Hellman.</returns>
		public abstract DHParameters ExportParameters (bool includePrivate);
		/// <summary>
		/// When overridden in a derived class, imports the specified <see cref="DHParameters"/>.
		/// </summary>
		/// <param name="parameters">The parameters for Diffie-Hellman.</param>
		public abstract void ImportParameters (DHParameters parameters);

#if UNUSED
		private byte[] GetNamedParam(SecurityElement se, string param) {
			SecurityElement sep = se.SearchForChildByTag(param);
			if (sep == null)
				return null;
			return Convert.FromBase64String(sep.Text);
		}
#endif
		/// <summary>
		/// Reconstructs a <see cref="DiffieHellman"/> object from an XML string.
		/// </summary>
		/// <param name="xmlString">The XML string to use to reconstruct the DiffieHellman object.</param>
		/// <exception cref="CryptographicException">One of the values in the XML string is invalid.</exception>
		public override void FromXmlString (string xmlString) {
			if (xmlString == null)
				throw new ArgumentNullException ();
			throw new NotImplementedException();
		}
		/// <summary>
		/// Creates and returns an XML string representation of the current <see cref="DiffieHellman"/> object.
		/// </summary>
		/// <param name="includePrivateParameters"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
		/// <returns>An XML string encoding of the current DiffieHellman object.</returns>
		public override string ToXmlString (bool includePrivateParameters) {
			throw new NotImplementedException();
		}
	}
}