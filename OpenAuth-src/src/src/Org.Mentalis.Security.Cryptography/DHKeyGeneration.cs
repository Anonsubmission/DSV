// <auto-generated />

//
// DHKeyGeneration.cs: Defines the different key generation methods.
//
// Author:
//	Pieter Philippaerts (Pieter@mentalis.org)
//
// (C) 2003 The Mentalis.org Team (http://www.mentalis.org/)
//
// Source Code License
// Copyright © 2002-2007, The Mentalis.org Team
// All rights reserved.
// http://www.mentalis.org/
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
// - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
// - Neither the name of the Mentalis.org Team, nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


namespace Org.Mentalis.Security.Cryptography {
	/// <summary>
	/// Defines the different Diffie-Hellman key generation methods.
	/// </summary>
	internal enum DHKeyGeneration {
		/*
		/// <summary>
		/// [TODO] you first randomly select a prime Q of size 160 bits, then choose P randomly among numbers like
		/// Q*R+1 with R random. Then you go along with finding a generator G which has order exactly Q. The private
		/// key X is then a number modulo Q.
		/// [FIPS 186-2-Change1 -- http://csrc.nist.gov/publications/fips/]
		/// </summary>
		// see RFC2631 [http://www.faqs.org/rfcs/rfc2631.html]
		DSA,*/
		/// <summary>
		/// Returns dynamically generated values for P and G. Unlike the Sophie Germain or DSA key generation methods,
		/// this method does not ensure that the selected prime offers an adequate security level.
		/// </summary>
		Random,
		/*
		/// <summary>
		/// Returns dynamically generated values for P and G. P is a Sophie Germain prime, which has some interesting
		/// security features when used with Diffie Hellman.
		/// </summary>
		SophieGermain,*/
		/// <summary>
		/// Returns values for P and G that are hard coded in this library. Contrary to what your intuition may tell you,
		/// using these hard coded values is perfectly safe.
		/// The values of the P and G parameters are taken from 'The OAKLEY Key Determination Protocol' [RFC2412].
		/// This is the prefered key generation method, because it is very fast and very safe.
		/// Because this method uses fixed values for the P and G parameters, not all bit sizes are supported.
		/// The current implementation supports bit sizes of 768, 1024 and 1536.
		/// </summary>
		Static
	}
}